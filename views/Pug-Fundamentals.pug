//- In this lecture, you're gonna learn the very fundamentals of working with Pug templates. So in essence, Pug is a simple whitespace sensitive syntax for writing html, so that's really the gist of what it is. Now what that means is that all we use to write html elements is their name and indentation in our code. So let's start by setting up a very simple html structure here, so give us some space. And so html usually always starts with the doctype and an html. Anyway, we always start with doctype and then the first element, so the overarching element in all our html documents is always the html, then inside of that there's usually a head element. And so in Pug in order to say that one element is inside of the other one, all we do is to use a tab. So we use indentation, as I mentioned in the beginning, and that's it. So that's our head element, and so inside of that head let's create the title of the webpage. And so, yet another tab. Okay, so again just indentation, then the name of the html element, and then the content itself. No opening tags, no closing tags, and none of the clutter that we usually have in html. So I actually really like this syntax here for writing html documents, so I find it really amazing, really simple to use, and to read as well. and now we also want to create a body. Now that body is of course not inside of the head, instead it's in the same level as the head, so basically also a direct child of html. And so all we need to do is to go back one indentation level and then create the element there. Then in there we want our h1. Great, next up let's actually also include a CSS file and also the favicon to be displayed here instead of this generic page thing there. And so if you know some html, you know that that kind of stuff belongs here to the head. So how would you actually include a CSS style sheet with normal html? 

//- You would do something like this. So you would create a link element, then define that it is a style sheet, and then also the reference, so just like this. So CSS style.css, and so what we have here, so this and this are attributes. And so with Pug, we write attributes like this. So instead of having this element, we simply write link, and then we write these attributes actually in parentheses, so like this. So without any space and open parentheses, and then in there is where we write these attributes just like this. And we should always write them with single quotes and not double quotes. Now just one thing that I wanted to tell you as well, is that we can actually use regular html as well in Pug. So if you wanted, you could leave this line of code here and Pug would then understand it just fine. And so let's now do the same for the favicon, and so again we need a link element, and in there we will define some attributes. So we defined that this is a shortcut icon, we also specify its type, so image, and in this case it's a PNG, and then again the reference to it, and it is an image favicon.png.So in other words, why does this style.css file actually get loaded from the CSS folder automatically, and the favicon also gets automatically loaded from the image folder. Well first of all, keep in mind that each of these assets actually triggers its own http request. And so again, why does it work like this because obviously we do not have a route handler for like any of these files here. But it is still a route if you think about it, because it's a get request to this url and also to this url. So let me remember why this does actually work, and it is because of this middleware that we defined somewhere up here, so this here. So remember that by using express.static, we basically define that all the static assets will always automatically be served from a folder called public, so with this folder here. And so that's why when we say css slash style, that in fact comes from the public folder. 

//- And so this CSS folder is the folder inside of public, and the same of course for the images. So if in our html we have image slash favicon, then it will open up the image folder that is inside of our public folder. Again because we defined it so in our express application. But another really cool thing is to actually use variables in here. So let me now show you how we can actually pass data into a template and then how we can use that data right here in Pug. So remember that we have this route here, which we use to render our base template. And of course if it's later, we will actually have a separate file, where all of these routes will then live. Anyway, in order to now pass data into this template here, all we need to do is to define an object here and then we'll simply put some data in there. And that data will then be available in the Pug template. And these variables that we passed in here, they are then called locals in the Pug file. So now let's actually go ahead and use that data. And what I want to do now is to put that tour variable on to our h1. So basically, I want to create an h1 element, where the content is that tour name. And the simplest way of doing that is to simply use the equal syntax like this, so h1 equals, then a space, and then tour. And that's it, that's really all the we have to do. And actually we could also write some JavaScript here, so let's say h2 equal the user, and then we can also call toUppercase on that. 

//- So simple JavaScript here because again here in this buffered code, which is how this is called, we can run simple JavaScript just like we did in here. So buffered code, and if we have buffered code, well then we also have to have unbuffered code. And so basically, unbuffered code is code that is not going to add anything to the output. And we write that by writing dash and then let's simply do some JavaScript here, for example just defining a variable. So let's say const x equals nine, and then let's do some buffered code again. So again code which is going to add something to the output. And so again we can use JavaScript here, so let's just do two times x. And so here, we will then get access to that x variable. So that should be 18 and indeed it is.Now there's actually also a third way of writing code, and let me show that here. So that is called interpolation, and actually that one looks a little bit like the ES6 template strings. So instead of having just Natours here, let's also add the name of the tour, and so we can do that like this. So with the template string in ES6, it works like this, but here in Pug it is with this hash, so just like this. And here we need to do it like this basically because this is code, so it's variable. And so this here is just a string, and so if we want to add something to that string, then we need to use this interpolation syntax.
doctype html
html 
    head 
        title Natours | #{tour}
        //- <link rel = 'stylesheet' href='css/style.css' />
        link(rel = 'stylesheet' href='css/style.css')
        link(rel='shortcut icon' type='image/png' href='img/favicon.png')

    body
        h1= tour
        h2=user.toUpperCase()
        p This is just some text

        - const x = 9
        h2= 2 * x

//- Creating Base Pug Template: But this here we have now set up our pug engine. Now it's time to create our very first template. So in here let's create our first pug file called base.pug. All I really wanna do here for now is to create an h1 element, so a main heading simply with the name of some tour, and the way that works with pug is just like this. So h1, and then the content of the element. Let's say The Park Camper. And that's actially it! That will then translate to this here, h1 The Park Camper, and then close that. So, in html we would have to write this, but the pug syntax makes it so much easier to write html like this. Of course it will also allow us to put all kinds of variables in here, so that we can really inject our data into these templates.
//- h1 The Park Camper
//- <h1>The Park Camper</h1>