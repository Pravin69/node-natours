import axios from 'axios';
import { showAlert } from './alert';

// Processing Payments on Front-End: In this lecture we gonna learn how to process payments with stripe, on the front-end whenever a user clicks a button. And to start let's actually configure it that button so that it only appears whenever a user is actually logged in. So here on the tour detail page, right now we have a user logged in, and so that button says book tour now, but it should only be like this when there is a currently logged in user, and otherwise, it would then redirect us to the login page. Now if there is currently a user logged in, then that means that we have access to the user variable, and so we can do if user well than this. And if there is no user, so else, well then we simply want to display a button, which brings us to the login page. Now here we also need to add an ID, book tour so that we can then select it in our JavaScript, and also something very important, is that we should put the current tour ID right here in this element, Okay? Now why is that so important? Well remember how the API endpoint that we just created. So this one here needs the tour ID, and so that tour ID needs to come from somewhere basically, and so right now we don't have that information anywhere on this page, and so we will put it here right on this element, so that then or JavaScript file can grab it from here, and send it along with the request to the checkout session route, okay? So just like we did here with a map, we are going to use a data attribute, and so that's data-, and then basically whatever a variable name we want to define. And so that's tour id in this case. And So now next up let's create a script in which we will actually do the request, and process the payment on the front end. And so just like before that will be in public, and then JavaScript.

// So one more script here. And I'm gonna call it stripe.js. And now here we actually need access to the stripe library again, but that package that we just installed before, so remember that stripe MPM package that we used here. So this one only works for the back end, and what we need to do on the front end is to actually include a script in the HTML, and since we only need that script here on the tour page, we will do it just like we did with the map box script. Now which script do we actually need? Well that we can very simply get from the documentation. So this was an expose a stripe object to the global scope, and so now in this file we can use that. So we say, const stripe =, and then this is that object that we get from the script that we just included, and then here we need our public key, alright? So we already used our secret key on the backend, now it's time to use our public key. And now let's then finally create a function, that I'm gonna call book tour. Okay? And so this function will take in a tour ID. And so the tour ID is the one that's gonna be coming right here from this user interface. So right from here, okay? So just as before, we gonna get that one from index.js where we will then also call this book Tour, okay? Anyway, let's now once more specify the steps that we gonna take here. So the first step is to actually get the session from the server, and so that is where now this route here comes in, Okay? So this is the point where we are going to use this endpoint to really get our checkout session on to the client side. Okay? So get checked out session. From endpoint or from API it doesn't really matter. That done as a second step, we will use our stripe object to basically automatically create the checkout form, + process or let's say + charge, the credit card for us, Okay? And that's actually it, so only two simple steps, and you will see that they are actually pretty simple. So let's store the session into a variable called session. And then we're going to await an HTTP request, which once more we will do with axios. And then into axios, we can simply just pass the URL, when all we want to do is a simple GET request. Okay? So up until this point we have always specified the method, and the URL and the data, but now we're only doing a GET request, and so that's then much simpler.

// Then here it's api/v1/bookings. Then check out session. And then the tour id. So that's this one here, which is gonna get passed into this function. So now in our index.js we will basically connect the green button with this function that we just created inside of stripe.js. So book button is = to document. get element by ID, and the ID remember is, book tour I believe. So yeah, so that's the ID that we just added before book ID. And so now we can add that event handler to it. So if there is a book button, then bookBtn.addeventlistener, waiting for a click then we need the event as well, and now we need to get that tour ID from that button, So that's tourid =, and now when I streak here which is e.target, and maybe you're familiar with that, so event.target is basically the element which was clicked, so the one that triggered this event listener here to be fired, alright? And so that will be of course this button. Then in there we have tour ID, and so in JavaScript, that will then actually be called tour, so like this let me just write it out. So tourId, so whenever there is a -, it will automatically get converted to this CamelCase notation. Okay? So e.target.dataset.tourId. And so with this I think we have everything correctly connected. So we click on that button, then we change the text on that button, then we get the tour ID from the data attribute that's on the button, and call book tour with that ID, okay? And so that ID will then get passed on to this URL, which in turn should return a checkout session. Anyway in order to now do this last step, it's actually very, very simple, all we have to do is to await. stripe.redirectTocheck out, let me see if I got this wrong, and let me see if I got that right, So redirect to check out. Alright? And then options but only one option, which is the session ID, and so that's going to be coming from session, and remember how the session was inside of data, so there was a data object created in there by axios, remember and so that is then all response itself. And so in there we have session.id. And that's it.

// Fantastic, so let's now just take a quick minute to recap the entire process that we just went through. So we started by creating this checkout session, which needs as an input the tour ID, so that we can then store a bunch of details about the tour in that session. So stuff about the tour name, the summary also the price images. So all that stuff that we want to show up on the checkout page, but also in our dashboard. Then we also include the email so that the user doesn't need to fill it out in the checkout, and then a bunch of other data. So remember this client reference ID, which will make a lot more sense once we actually get to use it. So we create this session whenever someone hits this check out session route, alright? And so that's exactly what we then do on our front end, right here in stripe.js. So we get our session here, and then from there we create a checkout, and charge the credit card using stripe.redirectTocheckout, and the stripe object here is simply using the stripe library with our public key, okay? Now where does this tour ID come from? Well, it is stored here right on the button where the user clicks to book a new tour. That ID is then read right here in index.js, whenever someone hits the booking button, Okay? So we store that into tour ID, and pass it into book tour, which again is this function here, which takes care of really processing the payments on the front end. And so the result of all this is what we just saw before where the user really get charged the credit card, and purchased the tour, so perfect. Now what's missing here is that actually whenever there is a new booking, we want to create a new booking document in our database. So just as we discussed way back when we talked about all data model in this application, right? And so to that end, we're gonna create the bookings model

export const bookTour = async (tourId) => {
  const stripe = Stripe(
    'pk_test_51O1jvqSAmJeXxlF6DOqOel1k8Lxn6Q9GJTNCfwMavG1lwQkvix2Mw2p1X1jGbBn7fOuY2WJxegM2So9iKu1ntP0200AXKUm27p',
  );

  try {
    // 1) Get checkout session from endpoint of API
    const session = await axios(
      `http://127.0.0.1:3000/api/v1/bookings/checkout-session/${tourId}`,
    );

    console.log(session);

    // 2) Create checkout form + charge credit card}
    await stripe.redirectToCheckout({
      sessionId: session.data.session.id,
    });
  } catch (err) {
    console.log(err);
    showAlert('error', err);
  }
};
